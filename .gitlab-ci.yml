stages:
  - test
  - build
  - code-quality
  - deploy-staging
  - deploy-production

# -------------------------- Test -------------------------- #
test:
  stage: test
  image: maven:latest
  tags:
    - dalfcs_docker_autoscale
  script:
    - cd server
    - mvn clean verify
  artifacts:
    when: always
    reports:
      junit:
        - server/target/surefire-reports/TEST-*.xml
        - server/target/failsafe-reports/TEST-*.xml
    
# -------------------------- Build Server for Dev -------------------------- #
build_server_for_dev:
  stage: build
  image: maven:latest
  tags:
    - dalfcs_docker_autoscale
  script:
    - cd server
    - mvn clean package -DskipTests=true
  artifacts:
    paths:
       - server/target/*.jar
  except:
    - main
    - tags

# -------------------------- Build Server for Staging -------------------------- #
build_server_for_staging:
  stage: build
  image: maven:latest
  tags:
    - dalfcs_docker_autoscale
  script:
    - cd server
    - mvn clean package -DskipTests=true -Pstaging
  artifacts:
    paths:
       - server/target/*.jar
  only:
    - main

# -------------------------- Build Server for Production -------------------------- #
build_server_for_prod:
  stage: build
  image: maven:latest
  tags:
    - dalfcs_docker_autoscale
  script:
    - cd server
    - mvn clean package -DskipTests=true -Pprod
  artifacts:
    paths:
       - server/target/*.jar
  only:
    - tags

# -------------------------- Build Client -------------------------- #
build_client:
  stage: build
  image: node:16
  tags:
    - dalfcs_docker_autoscale
  script:
    - cd client
    - npm install
    - npm run build
    
# -------------------------- Code Quality on Development -------------------------- #

code_quality_for_dev_by_designite:
  stage: code-quality
  tags:
    - ugrad
  variables:
    UPLOAD_QUALITY_REPORT: 'curl -X PUT -H "Authorization: Token $QSCORED_API_KEY_HARSH" -H "repository-link:$CI_PROJECT_URL" -H 
        "username:$QSCORED_USERNAME_HARSH" -H "Content-Type:multipart/form-data" --url "https://qscored.com/api/upload/file.xml?is_open_access=off&version=$CI_CONCURRENT_ID&project_name=$PROJECT_NAME_DEVELOPMENT" -F "file=$DESIGNITE_XML_OUTPUT"
    DOWNLOAD_DESINITE_URL: "https://www.designite-tools.com/static/download/DJE/DesigniteJava.jar"'
  script:
    - wget -O DesigniteJava.jar $DOWNLOAD_DESIGNITE_URL
    - java -jar DesigniteJava.jar -ci -repo $CI_PROJECT_ID/$CI_PROJECT_NAME -pat $PAT -host "https://git.cs.dal.ca/"
    - eval "$UPLOAD_QUALITY_REPORT"
  except:
    - main
    - tags

# -------------------------- Code Quality on Staging -------------------------- #

code_quality_for_staging_by_designite:
  stage: code-quality
  tags:
    - ugrad
  variables:
    UPLOAD_QUALITY_REPORT: 'curl -X PUT -H "Authorization: Token $QSCORED_API_KEY_HARSH" -H "repository-link:$CI_PROJECT_URL" -H 
        "username:$QSCORED_USERNAME_HARSH" -H "Content-Type:multipart/form-data" --url "https://qscored.com/api/upload/file.xml?is_open_access=off&version=$CI_CONCURRENT_ID&project_name=$PROJECT_NAME_STAGING" -F "file=$DESIGNITE_XML_OUTPUT"
    DOWNLOAD_DESINITE_URL: "https://www.designite-tools.com/static/download/DJE/DesigniteJava.jar"'
  script:
    - wget -O DesigniteJava.jar $DOWNLOAD_DESIGNITE_URL
    - java -jar DesigniteJava.jar -ci -repo $CI_PROJECT_ID/$CI_PROJECT_NAME -pat $PAT -host "https://git.cs.dal.ca/"
    - eval "$UPLOAD_QUALITY_REPORT"
  only:
    - main


# -------------------------- Code Quality on Production -------------------------- #

code_quality_for_prod_by_designite:
  stage: code-quality
  tags:
    - ugrad
  variables:
    UPLOAD_QUALITY_REPORT: 'curl -X PUT -H "Authorization: Token $QSCORED_API_KEY_HARSH" -H "repository-link:$CI_PROJECT_URL" -H 
        "username:$QSCORED_USERNAME_HARSH" -H "Content-Type:multipart/form-data" --url "https://qscored.com/api/upload/file.xml?is_open_access=off&version=$CI_CONCURRENT_ID&project_name=$PROJECT_NAME_PROD" -F "file=$DESIGNITE_XML_OUTPUT"
    DOWNLOAD_DESINITE_URL: "https://www.designite-tools.com/static/download/DJE/DesigniteJava.jar"'
  script:
    - wget -O DesigniteJava.jar $DOWNLOAD_DESIGNITE_URL
    - java -jar DesigniteJava.jar -ci -repo $CI_PROJECT_ID/$CI_PROJECT_NAME -pat $PAT -host "https://git.cs.dal.ca/"
    - eval "$UPLOAD_QUALITY_REPORT"
  only:
    - tags


# -------------------------- Code Quality by Sonar -------------------------- #

code_quality_by_sonar:
  stage: code-quality
  image: maven:latest
  tags:
    - dalfcs_docker_autoscale
  script:
    - cd server
    - mvn clean verify sonar:sonar
  artifacts:
    when: always
    reports:
      junit:
        - server/target/surefire-reports/TEST-*.xml
        - server/target/failsafe-reports/TEST-*.xml

# -------------------------- Deploy on Staging -------------------------- #
deploy_staging_client:
  stage: deploy-staging
  image: ruby:latest
  tags:
    - dalfcs_docker_autoscale  
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:
    - cd client
    - dpl --provider=heroku --app=$STAGING_CLIENT_HEROKU_APP_NAME --api-key=$HARSH_HEROKU_API_KEY --cleanup
  only:
    - fix-pipeline-issue

deploy_staging_server:
  stage: deploy-staging
  image: ruby:latest
  tags:
    - dalfcs_docker_autoscale  
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:
    - > 
      curl --request PATCH "https://api.heroku.com/apps/$STAGING_SERVER_HEROKU_APP_NAME/config-vars"  
      --data "{\"SPRING_PROFILES_ACTIVE\": \"staging\"}" 
      --header "Content-Type: application/json" 
      --header "Accept: application/vnd.heroku+json; version=3" 
      --header "Authorization: Bearer $HARSH_HEROKU_API_KEY"
    - cd server
    - dpl --provider=heroku --app=$STAGING_SERVER_HEROKU_APP_NAME --api-key=$HARSH_HEROKU_API_KEY --cleanup
  when: delayed
  start_in: 5 minutes
  only:
    - fix-pipeline-issue

# -------------------------- Deploy on Prod -------------------------- #
deploy_prod_client:
  stage: deploy-production
  image: ruby:latest
  tags:
    - dalfcs_docker_autoscale  
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:
    - cd client
    - dpl --provider=heroku --app=$PRODUCTION_CLIENT_HEROKU_APP_NAME --api-key=$HARSH_HEROKU_API_KEY --cleanup
  only:
    - tags

deploy_prod_server:
  stage: deploy-production
  image: ruby:latest
  tags:
    - dalfcs_docker_autoscale  
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:
    - > 
      curl --request PATCH "https://api.heroku.com/apps/$PRODUCTION_SERVER_HEROKU_APP_NAME/config-vars"  
      --data "{\"SPRING_PROFILES_ACTIVE\": \"prod\"}" 
      --header "Content-Type: application/json" 
      --header "Accept: application/vnd.heroku+json; version=3" 
      --header "Authorization: Bearer $HARSH_HEROKU_API_KEY"
    - cd server
    - dpl --provider=heroku --app=$PRODUCTION_SERVER_HEROKU_APP_NAME --api-key=$HARSH_HEROKU_API_KEY --cleanup
  when: delayed
  start_in: 5 minutes
  only:
    - tags